  let g:mapleader = ";"

  " this is necessary for the material theme to show correctly
  let g:spacevim_enable_guicolors = 1

  set wrap
  set ignorecase
  set smartcase
  set splitright
  " prevent arbitrary code execution https://github.com/numirias/security/blob/master/doc/2019-06-04_ace-vim-neovim.md
  set nomodeline
  " autosave
  let g:auto_save = 1
  let g:auto_save_no_updatetime = 1
  let g:auto_save_in_insert_mode = 0

  " autocomplete
  let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.php,*.jsx,*.js"

  au CursorHold * checktime    

  set clipboard+=unnamed,unnamedplus
  let g:spacevim_enable_vimfiler_welcome = 0
  let g:indentLine_setConceal = 0 

  " highlight search results
  set incsearch

  " live update of substitution
  set inccommand=nosplit

  set number relativenumber
  " set absolute numbers in insert mode
  augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter * set norelativenumber
  augroup END

  " run 'yarn global add standard prettier-standard babel-eslint eslint eslint-plugin-prettier' for this
  let g:ale_linters = {
            \   'javascript': ['standard'],
            \   'go': ['golangci-lint'],
            \}
  " \   'go': ['gopls'],
  let g:ale_fixers = {'javascript': ['prettier-standard']}
  let g:ale_list_window_size = 10
  let g:jsx_ext_required = 0 " Allow JSX in normal JS files 
  let g:ale_completion_enabled = 1
  let g:ale_lint_on_save = 1
  let g:ale_fix_on_save = 0
  let g:ale_go_golangci_lint_options = '-E goimports -D typecheck'

  au FileType javascript nmap <A-f> :ALEFix<cr>:w<cr>

  let g:spacevim_automatic_update = 1

  " based on dein.vim plugin manager
  " Update with :DeinUpdate
  " update / install others with :UpdateRemotePlugins
  let g:spacevim_custom_plugins = [
            \ ['junegunn/fzf.vim', {'merged' : 0}],
            \ ['tpope/vim-fugitive', {'merged' : 0}],
            \ ['wsdjeg/dein-ui.vim', {'merged' : 0}],
            \ ['pangloss/vim-javascript', {'merged' : 0}],
            \ ['mxw/vim-jsx', {'merged' : 0}],
            \ ['w0rp/ale', {'merged' : 0}],
            \ ['907th/vim-auto-save', {'merged' : 0}],
            \ ['fatih/vim-go', {'merged' : 0}],
            \ ['jodosha/vim-godebug', {'merged' : 0}],
            \ ['Shougo/deoplete.nvim', {'merged' : 0}],
            \ ['zchee/deoplete-go', {'merged' : 0}],
            \ ['mdempsky/gocode', {'merged' : 0, 'rtp': 'nvim/', 'do': '~/.cache/vimfiles/repos/github.com/mdempsky/gocode/nvim/symlink.sh'}],
            \ ['majutsushi/tagbar', {'merged' : 0}],
            \ ['mileszs/ack.vim', {'merged' : 0}],
            \ ['airblade/vim-gitgutter.git', {'merged' : 0}],
            \ ['tpope/vim-fugitive', {'merged' : 0}],
            \ ['tpope/vim-commentary', {'merged' : 0}],
            \ ['alvan/vim-closetag', {'merged' : 0}],
            \ ['tbodt/deoplete-tabnine', {'merged' : 0}],
            \ ]
  " run 'pip3 install pynvim' for vim
  " and :GoInstallBinaries
  " or :GoUpdate
  " or later :GoUpdateBinaries
  "
  " or :SPUpdate
  " and 
  " :SPUpdate spacevim
  
  " for deoplete-tabnine run install.sh in $HOME/.cache/. .... tbodt/deoplete-tabnine 
  " to install in case of errors
  " to update pull repo ~/.cache/vimfiles/repos/github.com/zxqfl/tabnine-vimu

  " homebrew
  set rtp+=/usr/local/opt/fzf 
  " rest
  set rtp+=~/.fzf

  nnoremap <C-p> :FZF<CR>

  " When the installation of ack.vim fails, run this command:
  " git clone --config transfer.fsckObjects=false https://github.com/mileszs/ack.vim.git ~/.cache/vimfiles/repos/github.com/mileszs/ack.vim

  if executable('ag')
    let g:ackprg = 'ag --vimgrep'
  endif
  nmap <leader>a :Ack! 

  let g:go_fmt_command = "goimports"
  let g:go_fmt_autosave = 0
  let g:go_info_mode='gopls'

  " Run this for go:
  " go get -u github.com/sourcegraph/go-langserver
  au FileType go nmap <leader>r :GoRename<cr>
  au FileType go nmap <leader>t :GoDeclsDir<cr>
  au FileType go nmap <leader>i :GoInfo<cr>
  au FileType go nmap <leader><F12> :GoReferrers<cr>

  au FileType go nmap <A-f> :GoFmt<cr>:w<cr>:GoBuild<cr>

  au FileType go nmap gi :GoInfo<cr>

  let g:deoplete#enable_at_startup = 1
  " autocomplete
  let g:deoplete#sources#go#pointer = 1
  let g:deoplete#sources#go#builtin_objects = 1
  let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
  let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
  set completeopt+=noselect

  :call CustomMappings()

  " close buffer with \bd or :Bclose
  :call InstallBclose()

endf

func! myspacevim#after() abort
endf

function CustomMappings()
  nnoremap <C-t> :action SearchEverywhere <CR>
  nmap Y y$

  " move cursor to the end of the line while in insert mode (ALT+SHIFT+4)
  inoremap <A-$> <C-o>$
  inoremap <A-^> <C-o>^
  inoremap <A-h> <Left>
  inoremap <A-j> <Esc>j
  inoremap <A-k> <Esc>k
  inoremap <A-l> <Right>
  inoremap <A-O> <C-O>O
  inoremap <A-o> <C-o>o

  " no esc
  inoremap jj <esc>
  inoremap <C-c> <esc>uu
  noremap <C-q> :q<esc>
  " inoremap  <esc> <NOP>

  " no cursors
  inoremap  <Up>    <NOP>
  inoremap  <Down>  <NOP>

  " left cursor in insert mode is used by vim-go plugin to move left
  " after inserting () when calling a method, so we better not disable it
  " inoremap  <Left>  <NOP>

  noremap   <Up>    <NOP>
  noremap   <Down>  <NOP>
  noremap   <Left>  <NOP>
  noremap   <Right> <NOP>

  vnoremap   <Up>    <NOP>
  vnoremap   <Down>  <NOP>
  vnoremap   <Left>  <NOP>
  vnoremap   <Right> <NOP>

  " jump up/down row on screen instead of line in document
  nmap j gj
  nmap k gk

  " Move line up/down
  
  " Normal mode
  nnoremap <C-j> :m .+1<CR>==
  nnoremap <C-k> :m .-2<CR>==

  " Insert mode
  inoremap <C-j> <ESC>:m .+1<CR>==gi
  inoremap <C-k> <ESC>:m .-2<CR>==gi

  " Visual mode
  vnoremap <C-j> :m '>+1<CR>gv=gv
  vnoremap <C-k> :m '<-2<CR>gv=gv

  set surround
set ideajoin